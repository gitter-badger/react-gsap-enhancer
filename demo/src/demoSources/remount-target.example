//update transform style on every mousemove (x, y)
//while it's also animating(y, slace, rotate)

function createAnim({getTargetByKeys}) {
  var target = getTargetByKeys(['target'])

  return new TimelineMax({repeat: -1})
    .to(target, 1, {scale: 1.23, y: '+=120'})
    .to(target, 1, {scale: 1, y: '-=120'})
}

@GSAP()
class Demo extends React.Component {
  constructor(props) {
    super(props)
    this.state = {type: 'div'}
  }

  componentDidMount() {
    var switchType = () => {
      this.setState({
        type: this.state.type === 'div' ? 'span' : 'div'
      })

      this.switchTimeoutId = setTimeout(switchType, 6200)
    }
    switchType()
    this.jumpAnim = this.addAnimation(createAnim)
  }

  componentWillUnmount() {
    clearTimeout(this.switchTimeoutId)
  }

  render () {
    var {type} = this.state

    var style = {
      backgroundColor: GS_GREEN,
      width: 230,
      height: 62,
      fontFamily: 'Roboto',
      fontWeight: 'bold',
      padding: 8
    }

    if (type === 'div') {
      return <div key='target' style={style}>{"I'm a DIV!"}</div>
    }
    else {
      return <span key='target' style={style}>{"I'm a SPAN!"}</span>
    }
  }
}

React.render(<Demo/>, mountNode)
